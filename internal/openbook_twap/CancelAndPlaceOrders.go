// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package openbook_twap

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CancelAndPlaceOrders is the `cancelAndPlaceOrders` instruction.
type CancelAndPlaceOrders struct {
	CancelClientOrdersIds *[]uint64
	PlaceOrders           *[]PlaceOrderArgs

	// [0] = [SIGNER] signer
	//
	// [1] = [WRITE] twapMarket
	//
	// [2] = [WRITE] openOrdersAccount
	//
	// [3] = [WRITE] userQuoteAccount
	//
	// [4] = [WRITE] userBaseAccount
	//
	// [5] = [WRITE] market
	//
	// [6] = [WRITE] bids
	//
	// [7] = [WRITE] asks
	//
	// [8] = [WRITE] eventHeap
	//
	// [9] = [WRITE] marketQuoteVault
	//
	// [10] = [WRITE] marketBaseVault
	//
	// [11] = [] tokenProgram
	//
	// [12] = [] openbookProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCancelAndPlaceOrdersInstructionBuilder creates a new `CancelAndPlaceOrders` instruction builder.
func NewCancelAndPlaceOrdersInstructionBuilder() *CancelAndPlaceOrders {
	nd := &CancelAndPlaceOrders{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	return nd
}

// SetCancelClientOrdersIds sets the "cancelClientOrdersIds" parameter.
func (inst *CancelAndPlaceOrders) SetCancelClientOrdersIds(cancelClientOrdersIds []uint64) *CancelAndPlaceOrders {
	inst.CancelClientOrdersIds = &cancelClientOrdersIds
	return inst
}

// SetPlaceOrders sets the "placeOrders" parameter.
func (inst *CancelAndPlaceOrders) SetPlaceOrders(placeOrders []PlaceOrderArgs) *CancelAndPlaceOrders {
	inst.PlaceOrders = &placeOrders
	return inst
}

// SetSignerAccount sets the "signer" account.
func (inst *CancelAndPlaceOrders) SetSignerAccount(signer ag_solanago.PublicKey) *CancelAndPlaceOrders {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(signer).SIGNER()
	return inst
}

// GetSignerAccount gets the "signer" account.
func (inst *CancelAndPlaceOrders) GetSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTwapMarketAccount sets the "twapMarket" account.
func (inst *CancelAndPlaceOrders) SetTwapMarketAccount(twapMarket ag_solanago.PublicKey) *CancelAndPlaceOrders {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(twapMarket).WRITE()
	return inst
}

// GetTwapMarketAccount gets the "twapMarket" account.
func (inst *CancelAndPlaceOrders) GetTwapMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOpenOrdersAccountAccount sets the "openOrdersAccount" account.
func (inst *CancelAndPlaceOrders) SetOpenOrdersAccountAccount(openOrdersAccount ag_solanago.PublicKey) *CancelAndPlaceOrders {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(openOrdersAccount).WRITE()
	return inst
}

// GetOpenOrdersAccountAccount gets the "openOrdersAccount" account.
func (inst *CancelAndPlaceOrders) GetOpenOrdersAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserQuoteAccountAccount sets the "userQuoteAccount" account.
func (inst *CancelAndPlaceOrders) SetUserQuoteAccountAccount(userQuoteAccount ag_solanago.PublicKey) *CancelAndPlaceOrders {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userQuoteAccount).WRITE()
	return inst
}

// GetUserQuoteAccountAccount gets the "userQuoteAccount" account.
func (inst *CancelAndPlaceOrders) GetUserQuoteAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetUserBaseAccountAccount sets the "userBaseAccount" account.
func (inst *CancelAndPlaceOrders) SetUserBaseAccountAccount(userBaseAccount ag_solanago.PublicKey) *CancelAndPlaceOrders {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(userBaseAccount).WRITE()
	return inst
}

// GetUserBaseAccountAccount gets the "userBaseAccount" account.
func (inst *CancelAndPlaceOrders) GetUserBaseAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMarketAccount sets the "market" account.
func (inst *CancelAndPlaceOrders) SetMarketAccount(market ag_solanago.PublicKey) *CancelAndPlaceOrders {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *CancelAndPlaceOrders) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetBidsAccount sets the "bids" account.
func (inst *CancelAndPlaceOrders) SetBidsAccount(bids ag_solanago.PublicKey) *CancelAndPlaceOrders {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(bids).WRITE()
	return inst
}

// GetBidsAccount gets the "bids" account.
func (inst *CancelAndPlaceOrders) GetBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAsksAccount sets the "asks" account.
func (inst *CancelAndPlaceOrders) SetAsksAccount(asks ag_solanago.PublicKey) *CancelAndPlaceOrders {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(asks).WRITE()
	return inst
}

// GetAsksAccount gets the "asks" account.
func (inst *CancelAndPlaceOrders) GetAsksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetEventHeapAccount sets the "eventHeap" account.
func (inst *CancelAndPlaceOrders) SetEventHeapAccount(eventHeap ag_solanago.PublicKey) *CancelAndPlaceOrders {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(eventHeap).WRITE()
	return inst
}

// GetEventHeapAccount gets the "eventHeap" account.
func (inst *CancelAndPlaceOrders) GetEventHeapAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetMarketQuoteVaultAccount sets the "marketQuoteVault" account.
func (inst *CancelAndPlaceOrders) SetMarketQuoteVaultAccount(marketQuoteVault ag_solanago.PublicKey) *CancelAndPlaceOrders {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(marketQuoteVault).WRITE()
	return inst
}

// GetMarketQuoteVaultAccount gets the "marketQuoteVault" account.
func (inst *CancelAndPlaceOrders) GetMarketQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetMarketBaseVaultAccount sets the "marketBaseVault" account.
func (inst *CancelAndPlaceOrders) SetMarketBaseVaultAccount(marketBaseVault ag_solanago.PublicKey) *CancelAndPlaceOrders {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(marketBaseVault).WRITE()
	return inst
}

// GetMarketBaseVaultAccount gets the "marketBaseVault" account.
func (inst *CancelAndPlaceOrders) GetMarketBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CancelAndPlaceOrders) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CancelAndPlaceOrders {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CancelAndPlaceOrders) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetOpenbookProgramAccount sets the "openbookProgram" account.
func (inst *CancelAndPlaceOrders) SetOpenbookProgramAccount(openbookProgram ag_solanago.PublicKey) *CancelAndPlaceOrders {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(openbookProgram)
	return inst
}

// GetOpenbookProgramAccount gets the "openbookProgram" account.
func (inst *CancelAndPlaceOrders) GetOpenbookProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst CancelAndPlaceOrders) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CancelAndPlaceOrders,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CancelAndPlaceOrders) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CancelAndPlaceOrders) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.CancelClientOrdersIds == nil {
			return errors.New("CancelClientOrdersIds parameter is not set")
		}
		if inst.PlaceOrders == nil {
			return errors.New("PlaceOrders parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Signer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TwapMarket is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.OpenOrdersAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserQuoteAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.UserBaseAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Bids is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Asks is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.EventHeap is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.MarketQuoteVault is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.MarketBaseVault is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.OpenbookProgram is not set")
		}
	}
	return nil
}

func (inst *CancelAndPlaceOrders) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CancelAndPlaceOrders")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("CancelClientOrdersIds", *inst.CancelClientOrdersIds))
						paramsBranch.Child(ag_format.Param("          PlaceOrders", *inst.PlaceOrders))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          signer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      twapMarket", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      openOrders", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       userQuote", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        userBase", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("          market", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("            bids", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("            asks", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("       eventHeap", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("marketQuoteVault", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta(" marketBaseVault", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("    tokenProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta(" openbookProgram", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj CancelAndPlaceOrders) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CancelClientOrdersIds` param:
	err = encoder.Encode(obj.CancelClientOrdersIds)
	if err != nil {
		return err
	}
	// Serialize `PlaceOrders` param:
	err = encoder.Encode(obj.PlaceOrders)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CancelAndPlaceOrders) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CancelClientOrdersIds`:
	err = decoder.Decode(&obj.CancelClientOrdersIds)
	if err != nil {
		return err
	}
	// Deserialize `PlaceOrders`:
	err = decoder.Decode(&obj.PlaceOrders)
	if err != nil {
		return err
	}
	return nil
}

// NewCancelAndPlaceOrdersInstruction declares a new CancelAndPlaceOrders instruction with the provided parameters and accounts.
func NewCancelAndPlaceOrdersInstruction(
	// Parameters:
	cancelClientOrdersIds []uint64,
	placeOrders []PlaceOrderArgs,
	// Accounts:
	signer ag_solanago.PublicKey,
	twapMarket ag_solanago.PublicKey,
	openOrdersAccount ag_solanago.PublicKey,
	userQuoteAccount ag_solanago.PublicKey,
	userBaseAccount ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	bids ag_solanago.PublicKey,
	asks ag_solanago.PublicKey,
	eventHeap ag_solanago.PublicKey,
	marketQuoteVault ag_solanago.PublicKey,
	marketBaseVault ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	openbookProgram ag_solanago.PublicKey) *CancelAndPlaceOrders {
	return NewCancelAndPlaceOrdersInstructionBuilder().
		SetCancelClientOrdersIds(cancelClientOrdersIds).
		SetPlaceOrders(placeOrders).
		SetSignerAccount(signer).
		SetTwapMarketAccount(twapMarket).
		SetOpenOrdersAccountAccount(openOrdersAccount).
		SetUserQuoteAccountAccount(userQuoteAccount).
		SetUserBaseAccountAccount(userBaseAccount).
		SetMarketAccount(market).
		SetBidsAccount(bids).
		SetAsksAccount(asks).
		SetEventHeapAccount(eventHeap).
		SetMarketQuoteVaultAccount(marketQuoteVault).
		SetMarketBaseVaultAccount(marketBaseVault).
		SetTokenProgramAccount(tokenProgram).
		SetOpenbookProgramAccount(openbookProgram)
}
