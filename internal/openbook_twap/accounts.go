// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package openbook_twap

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type TWAPMarket struct {
	Market     ag_solanago.PublicKey
	PdaBump    uint8
	TwapOracle TWAPOracle
}

var TWAPMarketDiscriminator = [8]byte{4, 225, 189, 172, 29, 98, 146, 80}

func (obj TWAPMarket) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TWAPMarketDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Market` param:
	err = encoder.Encode(obj.Market)
	if err != nil {
		return err
	}
	// Serialize `PdaBump` param:
	err = encoder.Encode(obj.PdaBump)
	if err != nil {
		return err
	}
	// Serialize `TwapOracle` param:
	err = encoder.Encode(obj.TwapOracle)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TWAPMarket) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TWAPMarketDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[4 225 189 172 29 98 146 80]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Market`:
	err = decoder.Decode(&obj.Market)
	if err != nil {
		return err
	}
	// Deserialize `PdaBump`:
	err = decoder.Decode(&obj.PdaBump)
	if err != nil {
		return err
	}
	// Deserialize `TwapOracle`:
	err = decoder.Decode(&obj.TwapOracle)
	if err != nil {
		return err
	}
	return nil
}
