// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package autocrat_v0

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// FinalizeProposal is the `finalizeProposal` instruction.
type FinalizeProposal struct {

	// [0] = [WRITE] proposal
	//
	// [1] = [] openbookTwapPassMarket
	//
	// [2] = [] openbookTwapFailMarket
	//
	// [3] = [] dao
	//
	// [4] = [WRITE] baseVault
	//
	// [5] = [WRITE] quoteVault
	//
	// [6] = [] vaultProgram
	//
	// [7] = [WRITE] daoTreasury
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewFinalizeProposalInstructionBuilder creates a new `FinalizeProposal` instruction builder.
func NewFinalizeProposalInstructionBuilder() *FinalizeProposal {
	nd := &FinalizeProposal{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetProposalAccount sets the "proposal" account.
func (inst *FinalizeProposal) SetProposalAccount(proposal ag_solanago.PublicKey) *FinalizeProposal {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(proposal).WRITE()
	return inst
}

// GetProposalAccount gets the "proposal" account.
func (inst *FinalizeProposal) GetProposalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOpenbookTwapPassMarketAccount sets the "openbookTwapPassMarket" account.
func (inst *FinalizeProposal) SetOpenbookTwapPassMarketAccount(openbookTwapPassMarket ag_solanago.PublicKey) *FinalizeProposal {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(openbookTwapPassMarket)
	return inst
}

// GetOpenbookTwapPassMarketAccount gets the "openbookTwapPassMarket" account.
func (inst *FinalizeProposal) GetOpenbookTwapPassMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOpenbookTwapFailMarketAccount sets the "openbookTwapFailMarket" account.
func (inst *FinalizeProposal) SetOpenbookTwapFailMarketAccount(openbookTwapFailMarket ag_solanago.PublicKey) *FinalizeProposal {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(openbookTwapFailMarket)
	return inst
}

// GetOpenbookTwapFailMarketAccount gets the "openbookTwapFailMarket" account.
func (inst *FinalizeProposal) GetOpenbookTwapFailMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetDaoAccount sets the "dao" account.
func (inst *FinalizeProposal) SetDaoAccount(dao ag_solanago.PublicKey) *FinalizeProposal {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(dao)
	return inst
}

// GetDaoAccount gets the "dao" account.
func (inst *FinalizeProposal) GetDaoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBaseVaultAccount sets the "baseVault" account.
func (inst *FinalizeProposal) SetBaseVaultAccount(baseVault ag_solanago.PublicKey) *FinalizeProposal {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(baseVault).WRITE()
	return inst
}

// GetBaseVaultAccount gets the "baseVault" account.
func (inst *FinalizeProposal) GetBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetQuoteVaultAccount sets the "quoteVault" account.
func (inst *FinalizeProposal) SetQuoteVaultAccount(quoteVault ag_solanago.PublicKey) *FinalizeProposal {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(quoteVault).WRITE()
	return inst
}

// GetQuoteVaultAccount gets the "quoteVault" account.
func (inst *FinalizeProposal) GetQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetVaultProgramAccount sets the "vaultProgram" account.
func (inst *FinalizeProposal) SetVaultProgramAccount(vaultProgram ag_solanago.PublicKey) *FinalizeProposal {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(vaultProgram)
	return inst
}

// GetVaultProgramAccount gets the "vaultProgram" account.
func (inst *FinalizeProposal) GetVaultProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetDaoTreasuryAccount sets the "daoTreasury" account.
func (inst *FinalizeProposal) SetDaoTreasuryAccount(daoTreasury ag_solanago.PublicKey) *FinalizeProposal {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(daoTreasury).WRITE()
	return inst
}

// GetDaoTreasuryAccount gets the "daoTreasury" account.
func (inst *FinalizeProposal) GetDaoTreasuryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst FinalizeProposal) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_FinalizeProposal,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst FinalizeProposal) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *FinalizeProposal) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Proposal is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OpenbookTwapPassMarket is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.OpenbookTwapFailMarket is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Dao is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BaseVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.QuoteVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.VaultProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.DaoTreasury is not set")
		}
	}
	return nil
}

func (inst *FinalizeProposal) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("FinalizeProposal")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("              proposal", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("openbookTwapPassMarket", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("openbookTwapFailMarket", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                   dao", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("             baseVault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("            quoteVault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          vaultProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           daoTreasury", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj FinalizeProposal) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *FinalizeProposal) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewFinalizeProposalInstruction declares a new FinalizeProposal instruction with the provided parameters and accounts.
func NewFinalizeProposalInstruction(
	// Accounts:
	proposal ag_solanago.PublicKey,
	openbookTwapPassMarket ag_solanago.PublicKey,
	openbookTwapFailMarket ag_solanago.PublicKey,
	dao ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	quoteVault ag_solanago.PublicKey,
	vaultProgram ag_solanago.PublicKey,
	daoTreasury ag_solanago.PublicKey) *FinalizeProposal {
	return NewFinalizeProposalInstructionBuilder().
		SetProposalAccount(proposal).
		SetOpenbookTwapPassMarketAccount(openbookTwapPassMarket).
		SetOpenbookTwapFailMarketAccount(openbookTwapFailMarket).
		SetDaoAccount(dao).
		SetBaseVaultAccount(baseVault).
		SetQuoteVaultAccount(quoteVault).
		SetVaultProgramAccount(vaultProgram).
		SetDaoTreasuryAccount(daoTreasury)
}
