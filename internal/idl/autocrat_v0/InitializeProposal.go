// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package autocrat_v0

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeProposal is the `initializeProposal` instruction.
type InitializeProposal struct {
	DescriptionUrl *string
	Instruction    *ProposalInstruction

	// [0] = [WRITE, SIGNER] proposal
	//
	// [1] = [WRITE] dao
	//
	// [2] = [WRITE] daoTreasury
	//
	// [3] = [] quoteVault
	//
	// [4] = [] baseVault
	//
	// [5] = [] openbookPassMarket
	//
	// [6] = [] openbookFailMarket
	//
	// [7] = [] openbookTwapPassMarket
	//
	// [8] = [] openbookTwapFailMarket
	//
	// [9] = [WRITE, SIGNER] proposer
	//
	// [10] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeProposalInstructionBuilder creates a new `InitializeProposal` instruction builder.
func NewInitializeProposalInstructionBuilder() *InitializeProposal {
	nd := &InitializeProposal{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetDescriptionUrl sets the "descriptionUrl" parameter.
func (inst *InitializeProposal) SetDescriptionUrl(descriptionUrl string) *InitializeProposal {
	inst.DescriptionUrl = &descriptionUrl
	return inst
}

// SetInstruction sets the "instruction" parameter.
func (inst *InitializeProposal) SetInstruction(instruction ProposalInstruction) *InitializeProposal {
	inst.Instruction = &instruction
	return inst
}

// SetProposalAccount sets the "proposal" account.
func (inst *InitializeProposal) SetProposalAccount(proposal ag_solanago.PublicKey) *InitializeProposal {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(proposal).WRITE().SIGNER()
	return inst
}

// GetProposalAccount gets the "proposal" account.
func (inst *InitializeProposal) GetProposalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDaoAccount sets the "dao" account.
func (inst *InitializeProposal) SetDaoAccount(dao ag_solanago.PublicKey) *InitializeProposal {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(dao).WRITE()
	return inst
}

// GetDaoAccount gets the "dao" account.
func (inst *InitializeProposal) GetDaoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetDaoTreasuryAccount sets the "daoTreasury" account.
func (inst *InitializeProposal) SetDaoTreasuryAccount(daoTreasury ag_solanago.PublicKey) *InitializeProposal {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(daoTreasury).WRITE()
	return inst
}

// GetDaoTreasuryAccount gets the "daoTreasury" account.
func (inst *InitializeProposal) GetDaoTreasuryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetQuoteVaultAccount sets the "quoteVault" account.
func (inst *InitializeProposal) SetQuoteVaultAccount(quoteVault ag_solanago.PublicKey) *InitializeProposal {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(quoteVault)
	return inst
}

// GetQuoteVaultAccount gets the "quoteVault" account.
func (inst *InitializeProposal) GetQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBaseVaultAccount sets the "baseVault" account.
func (inst *InitializeProposal) SetBaseVaultAccount(baseVault ag_solanago.PublicKey) *InitializeProposal {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(baseVault)
	return inst
}

// GetBaseVaultAccount gets the "baseVault" account.
func (inst *InitializeProposal) GetBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetOpenbookPassMarketAccount sets the "openbookPassMarket" account.
func (inst *InitializeProposal) SetOpenbookPassMarketAccount(openbookPassMarket ag_solanago.PublicKey) *InitializeProposal {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(openbookPassMarket)
	return inst
}

// GetOpenbookPassMarketAccount gets the "openbookPassMarket" account.
func (inst *InitializeProposal) GetOpenbookPassMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetOpenbookFailMarketAccount sets the "openbookFailMarket" account.
func (inst *InitializeProposal) SetOpenbookFailMarketAccount(openbookFailMarket ag_solanago.PublicKey) *InitializeProposal {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(openbookFailMarket)
	return inst
}

// GetOpenbookFailMarketAccount gets the "openbookFailMarket" account.
func (inst *InitializeProposal) GetOpenbookFailMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetOpenbookTwapPassMarketAccount sets the "openbookTwapPassMarket" account.
func (inst *InitializeProposal) SetOpenbookTwapPassMarketAccount(openbookTwapPassMarket ag_solanago.PublicKey) *InitializeProposal {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(openbookTwapPassMarket)
	return inst
}

// GetOpenbookTwapPassMarketAccount gets the "openbookTwapPassMarket" account.
func (inst *InitializeProposal) GetOpenbookTwapPassMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetOpenbookTwapFailMarketAccount sets the "openbookTwapFailMarket" account.
func (inst *InitializeProposal) SetOpenbookTwapFailMarketAccount(openbookTwapFailMarket ag_solanago.PublicKey) *InitializeProposal {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(openbookTwapFailMarket)
	return inst
}

// GetOpenbookTwapFailMarketAccount gets the "openbookTwapFailMarket" account.
func (inst *InitializeProposal) GetOpenbookTwapFailMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetProposerAccount sets the "proposer" account.
func (inst *InitializeProposal) SetProposerAccount(proposer ag_solanago.PublicKey) *InitializeProposal {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(proposer).WRITE().SIGNER()
	return inst
}

// GetProposerAccount gets the "proposer" account.
func (inst *InitializeProposal) GetProposerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializeProposal) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeProposal {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializeProposal) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst InitializeProposal) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeProposal,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeProposal) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeProposal) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.DescriptionUrl == nil {
			return errors.New("DescriptionUrl parameter is not set")
		}
		if inst.Instruction == nil {
			return errors.New("Instruction parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Proposal is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Dao is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.DaoTreasury is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.QuoteVault is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BaseVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.OpenbookPassMarket is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.OpenbookFailMarket is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.OpenbookTwapPassMarket is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.OpenbookTwapFailMarket is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Proposer is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *InitializeProposal) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeProposal")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("DescriptionUrl", *inst.DescriptionUrl))
						paramsBranch.Child(ag_format.Param("   Instruction", *inst.Instruction))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("              proposal", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                   dao", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           daoTreasury", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            quoteVault", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("             baseVault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    openbookPassMarket", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    openbookFailMarket", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("openbookTwapPassMarket", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("openbookTwapFailMarket", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("              proposer", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj InitializeProposal) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DescriptionUrl` param:
	err = encoder.Encode(obj.DescriptionUrl)
	if err != nil {
		return err
	}
	// Serialize `Instruction` param:
	err = encoder.Encode(obj.Instruction)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeProposal) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DescriptionUrl`:
	err = decoder.Decode(&obj.DescriptionUrl)
	if err != nil {
		return err
	}
	// Deserialize `Instruction`:
	err = decoder.Decode(&obj.Instruction)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeProposalInstruction declares a new InitializeProposal instruction with the provided parameters and accounts.
func NewInitializeProposalInstruction(
	// Parameters:
	descriptionUrl string,
	instruction ProposalInstruction,
	// Accounts:
	proposal ag_solanago.PublicKey,
	dao ag_solanago.PublicKey,
	daoTreasury ag_solanago.PublicKey,
	quoteVault ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	openbookPassMarket ag_solanago.PublicKey,
	openbookFailMarket ag_solanago.PublicKey,
	openbookTwapPassMarket ag_solanago.PublicKey,
	openbookTwapFailMarket ag_solanago.PublicKey,
	proposer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializeProposal {
	return NewInitializeProposalInstructionBuilder().
		SetDescriptionUrl(descriptionUrl).
		SetInstruction(instruction).
		SetProposalAccount(proposal).
		SetDaoAccount(dao).
		SetDaoTreasuryAccount(daoTreasury).
		SetQuoteVaultAccount(quoteVault).
		SetBaseVaultAccount(baseVault).
		SetOpenbookPassMarketAccount(openbookPassMarket).
		SetOpenbookFailMarketAccount(openbookFailMarket).
		SetOpenbookTwapPassMarketAccount(openbookTwapPassMarket).
		SetOpenbookTwapFailMarketAccount(openbookTwapFailMarket).
		SetProposerAccount(proposer).
		SetSystemProgramAccount(systemProgram)
}
