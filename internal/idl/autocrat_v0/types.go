// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package autocrat_v0

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type ProposalInstruction struct {
	ProgramId ag_solanago.PublicKey
	Accounts  []ProposalAccount
	Data      []byte
}

func (obj ProposalInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ProgramId` param:
	err = encoder.Encode(obj.ProgramId)
	if err != nil {
		return err
	}
	// Serialize `Accounts` param:
	err = encoder.Encode(obj.Accounts)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProposalInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ProgramId`:
	err = decoder.Decode(&obj.ProgramId)
	if err != nil {
		return err
	}
	// Deserialize `Accounts`:
	err = decoder.Decode(&obj.Accounts)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

type ProposalAccount struct {
	Pubkey     ag_solanago.PublicKey
	IsSigner   bool
	IsWritable bool
}

func (obj ProposalAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pubkey` param:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return err
	}
	// Serialize `IsSigner` param:
	err = encoder.Encode(obj.IsSigner)
	if err != nil {
		return err
	}
	// Serialize `IsWritable` param:
	err = encoder.Encode(obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProposalAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return err
	}
	// Deserialize `IsSigner`:
	err = decoder.Decode(&obj.IsSigner)
	if err != nil {
		return err
	}
	// Deserialize `IsWritable`:
	err = decoder.Decode(&obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

type UpdateDaoParams struct {
	PassThresholdBps         *uint16 `bin:"optional"`
	BaseBurnLamports         *uint64 `bin:"optional"`
	BurnDecayPerSlotLamports *uint64 `bin:"optional"`
	SlotsPerProposal         *uint64 `bin:"optional"`
	MarketTakerFee           *int64  `bin:"optional"`
	TwapExpectedValue        *uint64 `bin:"optional"`
}

func (obj UpdateDaoParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PassThresholdBps` param (optional):
	{
		if obj.PassThresholdBps == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.PassThresholdBps)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `BaseBurnLamports` param (optional):
	{
		if obj.BaseBurnLamports == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.BaseBurnLamports)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `BurnDecayPerSlotLamports` param (optional):
	{
		if obj.BurnDecayPerSlotLamports == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.BurnDecayPerSlotLamports)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `SlotsPerProposal` param (optional):
	{
		if obj.SlotsPerProposal == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SlotsPerProposal)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MarketTakerFee` param (optional):
	{
		if obj.MarketTakerFee == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MarketTakerFee)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `TwapExpectedValue` param (optional):
	{
		if obj.TwapExpectedValue == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TwapExpectedValue)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *UpdateDaoParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PassThresholdBps` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.PassThresholdBps)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `BaseBurnLamports` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.BaseBurnLamports)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `BurnDecayPerSlotLamports` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.BurnDecayPerSlotLamports)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `SlotsPerProposal` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SlotsPerProposal)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MarketTakerFee` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MarketTakerFee)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `TwapExpectedValue` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TwapExpectedValue)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type ProposalState ag_binary.BorshEnum

const (
	ProposalStatePending ProposalState = iota
	ProposalStatePassed
	ProposalStateFailed
)

func (value ProposalState) String() string {
	switch value {
	case ProposalStatePending:
		return "Pending"
	case ProposalStatePassed:
		return "Passed"
	case ProposalStateFailed:
		return "Failed"
	default:
		return ""
	}
}
