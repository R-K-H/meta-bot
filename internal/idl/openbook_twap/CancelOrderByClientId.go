// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package openbook_twap

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CancelOrderByClientId is the `cancelOrderByClientId` instruction.
type CancelOrderByClientId struct {
	ClientOrderId *uint64

	// [0] = [SIGNER] signer
	//
	// [1] = [WRITE] twapMarket
	//
	// [2] = [WRITE] openOrdersAccount
	//
	// [3] = [] market
	//
	// [4] = [WRITE] bids
	//
	// [5] = [WRITE] asks
	//
	// [6] = [] openbookProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCancelOrderByClientIdInstructionBuilder creates a new `CancelOrderByClientId` instruction builder.
func NewCancelOrderByClientIdInstructionBuilder() *CancelOrderByClientId {
	nd := &CancelOrderByClientId{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetClientOrderId sets the "clientOrderId" parameter.
func (inst *CancelOrderByClientId) SetClientOrderId(clientOrderId uint64) *CancelOrderByClientId {
	inst.ClientOrderId = &clientOrderId
	return inst
}

// SetSignerAccount sets the "signer" account.
func (inst *CancelOrderByClientId) SetSignerAccount(signer ag_solanago.PublicKey) *CancelOrderByClientId {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(signer).SIGNER()
	return inst
}

// GetSignerAccount gets the "signer" account.
func (inst *CancelOrderByClientId) GetSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTwapMarketAccount sets the "twapMarket" account.
func (inst *CancelOrderByClientId) SetTwapMarketAccount(twapMarket ag_solanago.PublicKey) *CancelOrderByClientId {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(twapMarket).WRITE()
	return inst
}

// GetTwapMarketAccount gets the "twapMarket" account.
func (inst *CancelOrderByClientId) GetTwapMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOpenOrdersAccountAccount sets the "openOrdersAccount" account.
func (inst *CancelOrderByClientId) SetOpenOrdersAccountAccount(openOrdersAccount ag_solanago.PublicKey) *CancelOrderByClientId {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(openOrdersAccount).WRITE()
	return inst
}

// GetOpenOrdersAccountAccount gets the "openOrdersAccount" account.
func (inst *CancelOrderByClientId) GetOpenOrdersAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMarketAccount sets the "market" account.
func (inst *CancelOrderByClientId) SetMarketAccount(market ag_solanago.PublicKey) *CancelOrderByClientId {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(market)
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *CancelOrderByClientId) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBidsAccount sets the "bids" account.
func (inst *CancelOrderByClientId) SetBidsAccount(bids ag_solanago.PublicKey) *CancelOrderByClientId {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(bids).WRITE()
	return inst
}

// GetBidsAccount gets the "bids" account.
func (inst *CancelOrderByClientId) GetBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetAsksAccount sets the "asks" account.
func (inst *CancelOrderByClientId) SetAsksAccount(asks ag_solanago.PublicKey) *CancelOrderByClientId {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(asks).WRITE()
	return inst
}

// GetAsksAccount gets the "asks" account.
func (inst *CancelOrderByClientId) GetAsksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetOpenbookProgramAccount sets the "openbookProgram" account.
func (inst *CancelOrderByClientId) SetOpenbookProgramAccount(openbookProgram ag_solanago.PublicKey) *CancelOrderByClientId {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(openbookProgram)
	return inst
}

// GetOpenbookProgramAccount gets the "openbookProgram" account.
func (inst *CancelOrderByClientId) GetOpenbookProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst CancelOrderByClientId) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CancelOrderByClientId,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CancelOrderByClientId) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CancelOrderByClientId) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ClientOrderId == nil {
			return errors.New("ClientOrderId parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Signer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TwapMarket is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.OpenOrdersAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Bids is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Asks is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.OpenbookProgram is not set")
		}
	}
	return nil
}

func (inst *CancelOrderByClientId) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CancelOrderByClientId")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("ClientOrderId", *inst.ClientOrderId))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         signer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     twapMarket", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     openOrders", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         market", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           bids", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           asks", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("openbookProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj CancelOrderByClientId) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ClientOrderId` param:
	err = encoder.Encode(obj.ClientOrderId)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CancelOrderByClientId) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ClientOrderId`:
	err = decoder.Decode(&obj.ClientOrderId)
	if err != nil {
		return err
	}
	return nil
}

// NewCancelOrderByClientIdInstruction declares a new CancelOrderByClientId instruction with the provided parameters and accounts.
func NewCancelOrderByClientIdInstruction(
	// Parameters:
	clientOrderId uint64,
	// Accounts:
	signer ag_solanago.PublicKey,
	twapMarket ag_solanago.PublicKey,
	openOrdersAccount ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	bids ag_solanago.PublicKey,
	asks ag_solanago.PublicKey,
	openbookProgram ag_solanago.PublicKey) *CancelOrderByClientId {
	return NewCancelOrderByClientIdInstructionBuilder().
		SetClientOrderId(clientOrderId).
		SetSignerAccount(signer).
		SetTwapMarketAccount(twapMarket).
		SetOpenOrdersAccountAccount(openOrdersAccount).
		SetMarketAccount(market).
		SetBidsAccount(bids).
		SetAsksAccount(asks).
		SetOpenbookProgramAccount(openbookProgram)
}
