// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package openbook_twap

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "OpenbookTwap"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	// `expected_value` will be the first observation of the TWAP, which is
	// necessary for anti-manipulation
	Instruction_CreateTwapMarket = ag_binary.TypeID([8]byte{252, 118, 173, 121, 60, 105, 106, 187})

	Instruction_PlaceOrder = ag_binary.TypeID([8]byte{51, 194, 155, 175, 109, 130, 96, 106})

	Instruction_EditOrder = ag_binary.TypeID([8]byte{254, 208, 118, 29, 173, 248, 200, 70})

	Instruction_CancelOrderByClientId = ag_binary.TypeID([8]byte{223, 248, 134, 155, 106, 111, 152, 171})

	Instruction_CancelAllOrders = ag_binary.TypeID([8]byte{196, 83, 243, 171, 17, 100, 160, 143})

	Instruction_PlaceTakeOrder = ag_binary.TypeID([8]byte{3, 44, 71, 3, 26, 199, 203, 85})

	Instruction_CancelAndPlaceOrders = ag_binary.TypeID([8]byte{64, 84, 116, 238, 194, 217, 237, 158})

	Instruction_GetBestBidAndAsk = ag_binary.TypeID([8]byte{228, 190, 148, 159, 92, 234, 82, 201})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_CreateTwapMarket:
		return "CreateTwapMarket"
	case Instruction_PlaceOrder:
		return "PlaceOrder"
	case Instruction_EditOrder:
		return "EditOrder"
	case Instruction_CancelOrderByClientId:
		return "CancelOrderByClientId"
	case Instruction_CancelAllOrders:
		return "CancelAllOrders"
	case Instruction_PlaceTakeOrder:
		return "PlaceTakeOrder"
	case Instruction_CancelAndPlaceOrders:
		return "CancelAndPlaceOrders"
	case Instruction_GetBestBidAndAsk:
		return "GetBestBidAndAsk"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"create_twap_market", (*CreateTwapMarket)(nil),
		},
		{
			"place_order", (*PlaceOrder)(nil),
		},
		{
			"edit_order", (*EditOrder)(nil),
		},
		{
			"cancel_order_by_client_id", (*CancelOrderByClientId)(nil),
		},
		{
			"cancel_all_orders", (*CancelAllOrders)(nil),
		},
		{
			"place_take_order", (*PlaceTakeOrder)(nil),
		},
		{
			"cancel_and_place_orders", (*CancelAndPlaceOrders)(nil),
		},
		{
			"get_best_bid_and_ask", (*GetBestBidAndAsk)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
