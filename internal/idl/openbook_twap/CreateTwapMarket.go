// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package openbook_twap

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// `expected_value` will be the first observation of the TWAP, which is
// necessary for anti-manipulation
type CreateTwapMarket struct {
	ExpectedValue *uint64

	// [0] = [] market
	//
	// [1] = [WRITE] twapMarket
	//
	// [2] = [] systemProgram
	//
	// [3] = [WRITE, SIGNER] payer
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateTwapMarketInstructionBuilder creates a new `CreateTwapMarket` instruction builder.
func NewCreateTwapMarketInstructionBuilder() *CreateTwapMarket {
	nd := &CreateTwapMarket{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetExpectedValue sets the "expectedValue" parameter.
func (inst *CreateTwapMarket) SetExpectedValue(expectedValue uint64) *CreateTwapMarket {
	inst.ExpectedValue = &expectedValue
	return inst
}

// SetMarketAccount sets the "market" account.
func (inst *CreateTwapMarket) SetMarketAccount(market ag_solanago.PublicKey) *CreateTwapMarket {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(market)
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *CreateTwapMarket) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTwapMarketAccount sets the "twapMarket" account.
func (inst *CreateTwapMarket) SetTwapMarketAccount(twapMarket ag_solanago.PublicKey) *CreateTwapMarket {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(twapMarket).WRITE()
	return inst
}

// GetTwapMarketAccount gets the "twapMarket" account.
func (inst *CreateTwapMarket) GetTwapMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateTwapMarket) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateTwapMarket {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateTwapMarket) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPayerAccount sets the "payer" account.
func (inst *CreateTwapMarket) SetPayerAccount(payer ag_solanago.PublicKey) *CreateTwapMarket {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CreateTwapMarket) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst CreateTwapMarket) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateTwapMarket,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateTwapMarket) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateTwapMarket) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ExpectedValue == nil {
			return errors.New("ExpectedValue parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TwapMarket is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Payer is not set")
		}
	}
	return nil
}

func (inst *CreateTwapMarket) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateTwapMarket")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("ExpectedValue", *inst.ExpectedValue))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       market", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   twapMarket", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj CreateTwapMarket) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ExpectedValue` param:
	err = encoder.Encode(obj.ExpectedValue)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateTwapMarket) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ExpectedValue`:
	err = decoder.Decode(&obj.ExpectedValue)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateTwapMarketInstruction declares a new CreateTwapMarket instruction with the provided parameters and accounts.
func NewCreateTwapMarketInstruction(
	// Parameters:
	expectedValue uint64,
	// Accounts:
	market ag_solanago.PublicKey,
	twapMarket ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	payer ag_solanago.PublicKey) *CreateTwapMarket {
	return NewCreateTwapMarketInstructionBuilder().
		SetExpectedValue(expectedValue).
		SetMarketAccount(market).
		SetTwapMarketAccount(twapMarket).
		SetSystemProgramAccount(systemProgram).
		SetPayerAccount(payer)
}
