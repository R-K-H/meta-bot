// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package autocrat_v0

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateDao is the `updateDao` instruction.
type UpdateDao struct {
	DaoParams *UpdateDaoParams

	// [0] = [WRITE] dao
	//
	// [1] = [SIGNER] daoTreasury
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateDaoInstructionBuilder creates a new `UpdateDao` instruction builder.
func NewUpdateDaoInstructionBuilder() *UpdateDao {
	nd := &UpdateDao{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetDaoParams sets the "daoParams" parameter.
func (inst *UpdateDao) SetDaoParams(daoParams UpdateDaoParams) *UpdateDao {
	inst.DaoParams = &daoParams
	return inst
}

// SetDaoAccount sets the "dao" account.
func (inst *UpdateDao) SetDaoAccount(dao ag_solanago.PublicKey) *UpdateDao {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(dao).WRITE()
	return inst
}

// GetDaoAccount gets the "dao" account.
func (inst *UpdateDao) GetDaoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDaoTreasuryAccount sets the "daoTreasury" account.
func (inst *UpdateDao) SetDaoTreasuryAccount(daoTreasury ag_solanago.PublicKey) *UpdateDao {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(daoTreasury).SIGNER()
	return inst
}

// GetDaoTreasuryAccount gets the "daoTreasury" account.
func (inst *UpdateDao) GetDaoTreasuryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst UpdateDao) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateDao,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateDao) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateDao) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.DaoParams == nil {
			return errors.New("DaoParams parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Dao is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.DaoTreasury is not set")
		}
	}
	return nil
}

func (inst *UpdateDao) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateDao")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("DaoParams", *inst.DaoParams))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        dao", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("daoTreasury", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj UpdateDao) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DaoParams` param:
	err = encoder.Encode(obj.DaoParams)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateDao) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DaoParams`:
	err = decoder.Decode(&obj.DaoParams)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateDaoInstruction declares a new UpdateDao instruction with the provided parameters and accounts.
func NewUpdateDaoInstruction(
	// Parameters:
	daoParams UpdateDaoParams,
	// Accounts:
	dao ag_solanago.PublicKey,
	daoTreasury ag_solanago.PublicKey) *UpdateDao {
	return NewUpdateDaoInstructionBuilder().
		SetDaoParams(daoParams).
		SetDaoAccount(dao).
		SetDaoTreasuryAccount(daoTreasury)
}
