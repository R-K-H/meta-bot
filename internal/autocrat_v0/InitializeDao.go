// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package autocrat_v0

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeDao is the `initializeDao` instruction.
type InitializeDao struct {

	// [0] = [WRITE] dao
	//
	// [1] = [WRITE, SIGNER] payer
	//
	// [2] = [] systemProgram
	//
	// [3] = [] metaMint
	//
	// [4] = [] usdcMint
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeDaoInstructionBuilder creates a new `InitializeDao` instruction builder.
func NewInitializeDaoInstructionBuilder() *InitializeDao {
	nd := &InitializeDao{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetDaoAccount sets the "dao" account.
func (inst *InitializeDao) SetDaoAccount(dao ag_solanago.PublicKey) *InitializeDao {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(dao).WRITE()
	return inst
}

// GetDaoAccount gets the "dao" account.
func (inst *InitializeDao) GetDaoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPayerAccount sets the "payer" account.
func (inst *InitializeDao) SetPayerAccount(payer ag_solanago.PublicKey) *InitializeDao {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *InitializeDao) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializeDao) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeDao {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializeDao) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMetaMintAccount sets the "metaMint" account.
func (inst *InitializeDao) SetMetaMintAccount(metaMint ag_solanago.PublicKey) *InitializeDao {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(metaMint)
	return inst
}

// GetMetaMintAccount gets the "metaMint" account.
func (inst *InitializeDao) GetMetaMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetUsdcMintAccount sets the "usdcMint" account.
func (inst *InitializeDao) SetUsdcMintAccount(usdcMint ag_solanago.PublicKey) *InitializeDao {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(usdcMint)
	return inst
}

// GetUsdcMintAccount gets the "usdcMint" account.
func (inst *InitializeDao) GetUsdcMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst InitializeDao) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeDao,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeDao) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeDao) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Dao is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MetaMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.UsdcMint is not set")
		}
	}
	return nil
}

func (inst *InitializeDao) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeDao")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          dao", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     metaMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     usdcMint", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj InitializeDao) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *InitializeDao) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewInitializeDaoInstruction declares a new InitializeDao instruction with the provided parameters and accounts.
func NewInitializeDaoInstruction(
	// Accounts:
	dao ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	metaMint ag_solanago.PublicKey,
	usdcMint ag_solanago.PublicKey) *InitializeDao {
	return NewInitializeDaoInstructionBuilder().
		SetDaoAccount(dao).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram).
		SetMetaMintAccount(metaMint).
		SetUsdcMintAccount(usdcMint)
}
